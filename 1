Проверка остатков 
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр Товары Расход
	Движения.Товары.Записывать = Истина;
	Движения.Товары.Очистить();
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.Товары.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Товар = ТекСтрокаТовары.Товар;
		Движение.Склад = Склад;
		Движение.Цена = ТекСтрокаТовары.Цена;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;      
	Движения.Записать();
	
	Если Режим = РежимПроведенияДокумента.Оперативный И НЕ ПроверитьОстаткиТоваров()Тогда
		  Отказ = Истина;
		  Возврат;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьОстаткиТоваров()  	
	 Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыОстатки.Товар КАК Товар,
		|	ТоварыОстатки.Склад КАК Склад,
		|	-ТоварыОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.Товары.Остатки(
		|			,
		|			Склад = &Склад
		|				И Товар В
		|					(ВЫБРАТЬ
		|						РеализацияТовараТовары.Товар КАК Товар
		|					ИЗ
		|						Документ.РеализацияТовара.Товары КАК РеализацияТовараТовары
		|					ГДЕ
		|						РеализацияТовараТовары.Ссылка = &Ссылка)) КАК ТоварыОстатки
		|ГДЕ
		|	ТоварыОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина; 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сообщить ("Недостаточно товара " + ВыборкаДетальныеЗаписи.Товар + " в количетсве " + ВыборкаДетальныеЗаписи.Количество);
            Возврат Ложь;
		КонецЦикла; 
	КонецЕсли;
    Возврат Истина;
КонецФункции;
Списание себестоимости 
•	По среднему 
Функция ПолучитьМатериалы(ВыбТ, Склад, Дата)  Экспорт
	ТСклад = Склад;
	ВыбТов=ВыбТ;
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ЖурналаОперацийОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	                |	ЖурналаОперацийОстаткиИОбороты.Период КАК Период,
	                |	ЖурналаОперацийОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	                |	ЖурналаОперацийОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	                |ИЗ
	                |	РегистрБухгалтерии.ЖурналаОпераций.ОстаткиИОбороты(
	                |			,
	                |			&КонДата,
	                |			Месяц,
	                |			,
	                |			,
	                |			,
	                |			Субконто1.Наименование = &Товар
	                |				И Субконто2.Наименование = &Склад) КАК ЖурналаОперацийОстаткиИОбороты";	   
	                                                                                                
	
	Запрос.УстановитьПараметр("Склад", Строка(ТСклад));
	Запрос.УстановитьПараметр("Товар", ВыбТов); 
	Запрос.УстановитьПараметр("КонДата", Дата);
	
	Выборка = Запрос.Выполнить().Выгрузить();  
	КолВыборка = Выборка.Количество();
	
	Среднее = 0; 
	КолОстаток = 0;
	СуммаОстаток = 0;
	Если КолВыборка > 0 Тогда   
		Для Каждого Стр Из Выборка Цикл 
			Если Среднее = 0 Тогда
				Среднее = (СуммаОстаток + Стр.СуммаОборотДт)/(Стр.КоличествоОборотДт); 
				КолОстаток =  Стр.КоличествоКонечныйОстаток;
			Иначе 
				Если (НачалоМесяца(Стр.Период)<= Дата И Дата <= КонецМесяца(Стр.Период)) Тогда 
					Среднее = (СуммаОстаток + Стр.СуммаОборотДт)/(Стр.КоличествоОборотДт + КолОстаток);
				Иначе 
					Среднее = (СуммаОстаток + Стр.СуммаОборотДт)/(Стр.КоличествоОборотДт + КолОстаток);
					КолОстаток = Стр.КоличествоКонечныйОстаток;
				КонецЕсли;
			КонецЕсли;
			СуммаОстаток = Стр.КоличествоКонечныйОстаток * Среднее;		
			
		КонецЦикла;
		
	Иначе 
		Сообщить ("Нет поступлений на данном складе или на выбранную дату");
	КонецЕсли;
	Возврат Среднее;	
	
КонецФункции






•	Списание FIFO
•	Списание LIFO
При изменении табл части
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТС = Элементы.Товары.ТекущиеДанные; 
	ТС.СуммаБезСкидки = ТС.Цена* ТС.Количество;
КонецПроцедуры


Проверка на повтор строк в таб часть 
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	Тов = Элемент.ТекущиеДанные.Товар; 
	ТоварыПриИзмененииНаСервере(Тов); 
КонецПроцедуры

&НаСервере
Функция ТоварыПриИзмененииНаСервере(Тов)  
	ТЧ = Объект.Товары.Выгрузить();	
	Стр = ТЧ.НайтиСтроки(Новый Структура("Товар", Тов)) ; 
	Если Стр.Количество()> 1 Тогда       
		Для Каждого  тч из Объект.Товары Цикл  
			Если тч.Товар = Тов Тогда
				Объект.Товары.Удалить(тч);
			КонецЕсли;
		КонецЦикла;
		Сообщить("Такой товар уже выбран!" ); 
	КонецЕсли;   
КонецФункции

Зарплата
•	Форма документа 
Функция ПолучитьОклад(Сотрудник)
	Возврат Сотрудник.Оклад;
КонецФункции

Функция ПолучитьНадбавкуЗаСтепеньДоктора()
	Возврат 0.6;
КонецФункции

Функция ПолучитьОтпуск()
	Возврат 5000;
КонецФункции  

Функция ПолучитьЗаПраздДни()
	Возврат 2;
КонецФункции

Функция ПолучитьАлементы()
	Возврат 0.25;
КонецФункции


&НаСервере
Функция ЗаполнитьСтроку(ТекСотр, ТекВидРасчета, ДатаНачала, ДатаОкончания,ПериодРегистрации)	
	Если ДатаНачала = Дата(1, 1, 1) Тогда 
		ДатаНачала = НачалоМесяца(ПериодРегистрации);
	КонецЕсли;
	
	Если ДатаОкончания = Дата(1, 1, 1) Тогда 
		ДатаОкончания = КонецМесяца(ПериодРегистрации);
	КонецЕсли;
	
	Если ТекВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад Тогда
		Величина = ПолучитьОклад(ТекСотр);
	ИначеЕсли ТекВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаСтепеньДоктора Тогда
		Величина = ПолучитьНадбавкуЗаСтепеньДоктора();
	ИначеЕсли ТекВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Отпуск Тогда
		Величина = ПолучитьОтпуск(); 
	ИначеЕсли ТекВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаПраздничныеДни Тогда
		Величина = ПолучитьЗаПраздДни();
	ИначеЕсли ТекВидРасчета = ПланыВидовРасчета.Удержания.Алименты Тогда
		Величина = ПолучитьАлементы();
	КонецЕсли;
	Возврат Величина;
КонецФункции


&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	ТекСтрока.Величина = ЗаполнитьСтроку(ТекСтрока.Сотрудник, ТекСтрока.ВидРасчета, 
		ТекСтрока.ДатаНачала, ТекСтрока.ДатаОкончания, Объект.ПериодРегистрации);
КонецПроцедуры


&НаКлиенте
Процедура УдержанияСотрудникПриИзменении(Элемент)
	ТекСтрока = Элементы.Удержания.ТекущиеДанные;
	ТекСтрока.Величина = ЗаполнитьСтроку(ТекСтрока.Сотрудник, ТекСтрока.ВидРасчета, 
		ТекСтрока.ДатаНачала, ТекСтрока.ДатаОкончания, Объект.ПериодРегистрации);
КонецПроцедуры
•	Модуль объекта
Процедура ОбработкаПроведения(Отказ, Режим)
	// регистр ОсновныеНачисления 
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		Движение = Движения.ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.Регистратор = Ссылка;
		Движение.ВидРасчета = ТекСтрокаНачисления.ВидРасчета;
		Движение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;
		Движение.ПериодДействияКонец = ТекСтрокаНачисления.ДатаОкончания;
		Движение.ПериодРегистрации = ПериодРегистрации;
		Движение.БазовыйПериодНачало = НачалоДня(ТекСтрокаНачисления.ДатаНачала);
		Движение.БазовыйПериодКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);
		Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
		Движение.Результат = 0;
		Движение.ИсходныеДанные = ТекСтрокаНачисления.Величина;
		Если ТекСтрокаНачисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Отпуск Тогда
			Движение.Результат = Движение.ИсходныеДанные;
		КонецЕсли;
	КонецЦикла;

	// регистр ОсновныеУдержания
	Для Каждого ТекСтрокаУдержания Из Удержания Цикл
		Движение = Движения.Удержания.Добавить();
		Движение.Сторно = Ложь;                          
		Движение.Регистратор = Ссылка;
		Движение.ВидРасчета = ТекСтрокаУдержания.ВидРасчета;
		Движение.ПериодРегистрации = ПериодРегистрации;
        Движение.БазовыйПериодНачало = НачалоДня(ТекСтрокаУдержания.ДатаНачала);
		Движение.БазовыйПериодКонец = КонецДня(ТекСтрокаУдержания.ДатаОкончания);
		Движение.Сотрудник = ТекСтрокаУдержания.Сотрудник;
		Движение.Результат = 0;
		Движение.ИсходныеДанные = ТекСтрокаУдержания.Величина;
	КонецЦикла;

	Движения.ОсновныеНачисления.Записать();
	Движения.Удержания.Записать();  
	
	РассчитатьНачисления(Движения.ОсновныеНачисления, ПланыВидовРасчета.ОсновныеНачисления.Оклад);
	РассчитатьНачисления(Движения.ОсновныеНачисления, ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаПраздничныеДни);
	РассчитатьНачисления(Движения.ОсновныеНачисления, ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаСтепеньДоктора);
	
	РассчитатьУдержания(Движения.Удержания, ПланыВидовРасчета.Удержания.Алименты);
КонецПроцедуры


Процедура РассчитатьНачисления(НаборДвижений, ВидРасчета)
	//Расчет оклада
	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад Тогда 
		Для Каждого ТекДвижение Из НаборДвижений Цикл 
			Если ТекДвижение.ВидРасчета = ВидРасчета Тогда 
				//При расчете оклада необходимо учитывать фактически отработанные дни
				//а также общее число рабочих дней 
				ФактОтработано = ТекДвижение.ПолучитьДанныеГрафика(ВидПериодаРегистраРасчета.ФактическийПериодДействия);
				ПланОтработано = ТекДвижение.ПолучитьДанныеГрафика(ВидПериодаРегистраРасчета.ПериодДействия);
				//Расчет результата оклада согласно формуле по варианту
				ТекДвижение.Результат = ТекДвижение.ИсходныеДанные * ФактОтработано.Получить(0).Значение / ПланОтработано.Получить(0).Значение;
			КонецЕсли;
		КонецЦикла;
	//Расчет доплаты за степень доктора	
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаСтепеньДоктора Тогда		
		//Задаем список ресурсов базовых регистров расчета, которые необходимо просуммировать
		Ресурсы = Новый Массив(1);
		Ресурсы.Установить(0, "ОсновныеНачисления.Результат");
		//Задаем список измерений базовых регистров расчета, по которым будет выполняться подбор базы.
		Измерения = Новый Структура("Сотрудник", "ОсновныеНачисления.Сотрудник");
		Для Каждого ТекДвижение Из НаборДвижений Цикл 
			Если ТекДвижение.ВидРасчета = ВидРасчета Тогда  
				//Получаем базу вида расчета по  ресурсу и измерению
				БазаРасчета = ТекДвижение.ПолучитьБазу(Ресурсы, Измерения); 
				//Расчет результата текущего вида расчета согласно формуле по варианту 
				ТекДвижение.Результат=ТекДвижение.ИсходныеДанные*БазаРасчета[0].Результат + (1*12130);
			КонецЕсли;
		КонецЦикла;
	//Расчет доплаты за празд дни	
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.ДоплатаЗаПраздничныеДни Тогда
		Ресурсы = Новый Массив(1);
		Ресурсы.Установить(0, "ОсновныеНачисления.Результат");
		Измерения = Новый Структура("Сотрудник", "ОсновныеНачисления.Сотрудник");
		Для Каждого ТекДвижение Из НаборДвижений Цикл 
			Если ТекДвижение.ВидРасчета = ВидРасчета Тогда
				БазаРасчета = ТекДвижение.ПолучитьБазу(Ресурсы, Измерения);
				ТекДвижение.Результат = ТекДвижение.ИсходныеДанные *(БазаРасчета[0].Результат/160);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НаборДвижений.Модифицированность() Тогда 
		НаборДвижений.Записать(, Истина);
	КонецЕсли;	
	
КонецПроцедуры   


Процедура РассчитатьУдержания(НаборДвижений, ВидРасчета)
	Если ВидРасчета = ПланыВидовРасчета.Удержания.Алименты Тогда 
		Ресурсы = Новый Массив(1);
		Ресурсы.Установить(0, "ОсновныеНачисления.Результат");
		Измерения = Новый Структура("Сотрудник", "ОсновныеНачисления.Сотрудник");
		Для Каждого ТекДвижение Из НаборДвижений Цикл 
			Если ТекДвижение.ВидРасчета = ВидРасчета Тогда
				БазаРасчета = ТекДвижение.ПолучитьБазу(Ресурсы, Измерения);
				ТекДвижение.Результат = ТекДвижение.ИсходныеДанные * БазаРасчета[0].Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НаборДвижений.Модифицированность() Тогда 
		НаборДвижений.Записать(, Истина);
	КонецЕсли;
КонецПроцедуры
